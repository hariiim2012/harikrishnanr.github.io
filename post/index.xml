<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Harikrishnan R</title>
    <link>http://mekano.in/post/index.xml</link>
    <description>Recent content in Posts on Harikrishnan R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Harikrishnan R</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>API&#39;s_and_beyond</title>
      <link>http://mekano.in/post/API%27s_and_beyond/</link>
      <pubDate>Sun, 19 Mar 2017 11:42:17 +0530</pubDate>
      
      <guid>http://mekano.in/post/API%27s_and_beyond/</guid>
      <description>&lt;div align=&#34;justify&#34;&gt;
&lt;p&gt;API’s are around in the IT ecosystem for a long time now. Typically API’s are created once and then consumed by multiple consumers. Many a time’s service bus or middle layer systems are used to build and distribute API’s in large enterprise ecosystems.&lt;/p&gt; 
 
&lt;p&gt;I am thinking of a more modular approach to build and distribute API’s and enhance the IT system usability across the organization (maybe beyond the boundary of organization). Typically a consumer application is built for a particular use case/s and consume a set of API from other systems (mainly from enterprise level core systems).&lt;/p&gt;
 
&lt;/p&gt;Once the consumer application is operational, naturally process improvements and business advancement will push the consumer application to modify its functionality time to time to adapt to new circumstances. This requires going back to the code and modifying the tightly coupled components.&lt;/p&gt;
 
&lt;p&gt;What I think, instead of tightly coupled business logic, create more loosely coupled modules, ie. all major function points will be created as independently working service points within the application, and an orchestration layer will provide the overall functionality to users. Any future modification will be another similar modular layer consuming relevant parent API’s and again exposing its own API’s.&lt;/p&gt;
 
&lt;p&gt;Eventually, the entire IT space will become a collection of API’s which will have own functionality as well as a capability to extend to other consumers.  This will be similar to Lego blocks, each block in the chain will work as a bridge for others, while serving its own function.&lt;/p&gt;
 
&lt;p&gt;This approach will significantly reduce the go-to-market time and also improve the serviceability of applications.  There is no additional development effort required to make this happen, only a different planning while designing consumer applications.&lt;/p&gt;
 
&lt;p&gt;May be this is already there somewhere, in my limited search and collection I was not able to find anything similar. your comments, please&lt;/P&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
